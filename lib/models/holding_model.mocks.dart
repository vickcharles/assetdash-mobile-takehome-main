// Mocks generated by Mockito 5.3.2 from annotations
// in assetdash_takehome/models/holding_model.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:assetdash_takehome/models/holding_model.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeHoldingList_0 extends _i1.SmartFake implements _i2.HoldingList {
  _FakeHoldingList_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HoldingList].
///
/// See the documentation for Mockito's code generation for more information.
class MockHoldingList extends _i1.Mock implements _i2.HoldingList {
  @override
  List<_i2.Holding> get holdings => (super.noSuchMethod(
        Invocation.getter(#holdings),
        returnValue: <_i2.Holding>[],
        returnValueForMissingStub: <_i2.Holding>[],
      ) as List<_i2.Holding>);
  @override
  set holdings(List<_i2.Holding>? _holdings) => super.noSuchMethod(
        Invocation.setter(
          #holdings,
          _holdings,
        ),
        returnValueForMissingStub: null,
      );
  @override
  Map<String, double> get getTopHoldingsAsMap => (super.noSuchMethod(
        Invocation.getter(#getTopHoldingsAsMap),
        returnValue: <String, double>{},
        returnValueForMissingStub: <String, double>{},
      ) as Map<String, double>);
  @override
  List<_i2.Holding> get sortedHoldings => (super.noSuchMethod(
        Invocation.getter(#sortedHoldings),
        returnValue: <_i2.Holding>[],
        returnValueForMissingStub: <_i2.Holding>[],
      ) as List<_i2.Holding>);
  @override
  List<String> get types => (super.noSuchMethod(
        Invocation.getter(#types),
        returnValue: <String>[],
        returnValueForMissingStub: <String>[],
      ) as List<String>);
  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: <String, dynamic>{},
        returnValueForMissingStub: <String, dynamic>{},
      ) as Map<String, dynamic>);
  @override
  _i2.HoldingList filterHoldingsByType(String? type) => (super.noSuchMethod(
        Invocation.method(
          #filterHoldingsByType,
          [type],
        ),
        returnValue: _FakeHoldingList_0(
          this,
          Invocation.method(
            #filterHoldingsByType,
            [type],
          ),
        ),
        returnValueForMissingStub: _FakeHoldingList_0(
          this,
          Invocation.method(
            #filterHoldingsByType,
            [type],
          ),
        ),
      ) as _i2.HoldingList);
}
